#!/usr/bin/env python
################################################################################
# sample_dust.py
#
# Syntax
#   python sample_dust.py path destination npz_files...
#
# This program generates a dust file for delivery to the hazard analysts.
#
# Each file's name is name_speed*_q*_case*_[nominal|charon|kbo]_rho*.dust
#   path            path to a directory that contains these files:
#                       charon.dat.txt
#                       nh_nominal.dat.txt
#                       nh_shbot1.dat.txt
#                       nh_shbot3.dat.txt
#                       nh_dis.dat.txt
#   destination     path to the directory where the dust files will be created.
#   npz_files...    the name(s) of the NumPy .npz file(s) being sampled. These
#                   files are generated by calibrate_3d.py
#
# The files generated are named with one of these prefixes in front of the
# pickle file's name: 'nominal_', 'shbot1_', 'shbot3_', 'dis_'.
#
# Mark Showalter, mshowalter@seti.org
# Version 1.0: December, 2014
# Version 1.1 1/3/15: Introduces TIME_LIMIT parameter, destination dir, uses
#   NumPy .npz files with memory mapping rather than pickle files.
################################################################################

import os
import sys
import numpy as np
import datetime

TIME_LIMIT = 3 * 60 * 60        # 4 hours in seconds

################################################################################

path = sys.argv[1]
# path = '/Data/New-Horizons/Trajectories/'

print 'reading trajectories...'

f = open(os.path.join(path, 'charon.dat.txt'))
a = []
for rec in f:
    values = np.fromstring(rec, sep=' ')
    a.append((values[0], values[5], values[6], values[7]))
        # time, x, y, z in the PC frame, barycenter-centered

charon = np.array(a)

f = open(os.path.join(path, 'nh_nominal.dat.txt'))
a = []
for rec in f:
    values = np.fromstring(rec, sep=' ')
    a.append((values[0], values[5], values[6], values[7]))

nominal = np.array(a)
assert np.all(nominal[:,0] == charon[:,0])

f = open(os.path.join(path, 'nh_shbot1.dat.txt'))
a = []
for rec in f:
    values = np.fromstring(rec, sep=' ')
    a.append((values[0], values[5], values[6], values[7]))

shbot1 = np.array(a)
assert np.all(shbot1[:,0] == charon[:,0])

f = open(os.path.join(path, 'nh_shbot3.dat.txt'))
a = []
for rec in f:
    values = np.fromstring(rec, sep=' ')
    a.append((values[0], values[5], values[6], values[7]))

shbot3 = np.array(a)
assert np.all(shbot3[:,0] == charon[:,0])

f = open(os.path.join(path, 'nh_dis.dat.txt'))
a = []
for rec in f:
    values = np.fromstring(rec, sep=' ')
    a.append((values[0], values[5], values[6], values[7]))

dis = np.array(a)
assert np.all(dis[:,0] == charon[:,0])

trajectories = [charon[:,1:4],
                nominal[:,1:4], shbot1[:,1:4], shbot3[:,1:4], dis[:,1:4]]
time = charon[:,0] - 490146663.184

charon_lon = np.arctan2(charon[:,2],charon[:,1])
cos_lon = np.cos(charon_lon)
sin_lon = np.sin(charon_lon)

for traj in trajectories:
    x1 = traj[:,0]
    y1 = traj[:,1]
    x2 =  cos_lon * x1 + sin_lon * y1
    y2 = -sin_lon * x1 + cos_lon * y1
    traj[:,0] = x2
    traj[:,1] = y2

# Confirm Charon is now on the positive x-axis
assert np.all(np.abs(trajectories[0][:,0]) > 0.)
assert np.all(np.abs(trajectories[0][:,1]) < 1.e-10)

# Remove Charon from the list of trajectories
trajectories = trajectories[1:]

print 'done'

TRAJ_NAMES = ['nominal_', 'shbot1_', 'shbot3_', 'dis_']

################################################################################

dest = sys.argv[2]

for npz_file in sys.argv[3:]:

    data = np.load(npz_file, mmap_mode='r')
    (imax, jmax, kmax, xcell, ycell, zcell) = data['info']
    imax = int(imax)
    jmax = int(jmax)
    kmax = int(kmax)
    arrays = data['density']

    ############################################################################
    # Resample the model along the trajectory
    ############################################################################

    now = str(datetime.datetime.now())

    for itraj in range(len(trajectories)):
        traj = trajectories[itraj]

        (dir, filename) = os.path.split(npz_file)
        (prefix, ext) = os.path.splitext(filename)

        dustfile = TRAJ_NAMES[itraj] + prefix + '.dust'
        dustpath = os.path.join(dest, TRAJ_NAMES[itraj] + prefix + '.dust')
        if os.path.exists(dustpath): continue

        print dustfile

        f = open(dustpath, 'w')
        f.write('# %s\n' % dustpath)
        f.write('# %s\n' % now)
        f.write('#\n')
        f.write('# column 1: time from C/A in seconds, integer format\n')
        f.write('# column 2: number of 0.0464 mm particles per cubic km\n')
        f.write('# column 3: same, for 0.1 mm particles\n')
        f.write('# column 4: same, for 0.215 mm particles\n')
        f.write('# column 5: same, for 0.464 mm particles\n')
        f.write('# column 6: same, for 1 mm particles\n')
        f.write('# column 7: same, for 2.15 mm particles\n')
        f.write('#\n')

        for itime in range(len(time)):
            t = time[itime]
            if t < -TIME_LIMIT: continue
            if t >  TIME_LIMIT: continue

            f.write('%6.0f' % t)

            (x,y,z) = traj[itime]
            i = int((imax/2. + x/xcell) // 1)
            j = int((jmax/2. + y/ycell) // 1)
            k = int((kmax/2. + z/zcell) // 1)

            if i < 0 or i >= imax or \
               j < 0 or j >= jmax or \
               k < 0 or k >= kmax:
                f.write(' 0. 0. 0. 0. 0. 0.\n')
            else:
                # print time[itime], i, j, k, x, y, z, np.sqrt(x**2+y**2+z**2)
                for isize in range(6):
                    f.write(' %11.5e' % arrays[isize][i,j,k])

                f.write('\n')

        f.close()

################################################################################
